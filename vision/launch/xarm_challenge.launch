<!-- -*- xml -*-

     This tutorial relies on a live video sequence acquired with a 
     firewire camera in front of a QR code planar target. The model 
     corresponding to this target is given into the models directory 
     of this package.

     Camera parameters are read from models/calibration.ini file. They 
     need to be the one of your camera.

     Here we use the viewer coming with visp_tracker package to 
     display the pose estimation results.

     See http://www.ros.org/wiki/visp_auto_tracker for more information.
     add_gripper:=false add_vacuum_gripper:=false

  -->
<launch>
    <param name="/camera_prefix" type="string" value="/" />
    <include file="$(find xarm_planner)/launch/xarm_planner_rviz_sim.launch">
        <arg name="robot_dof" value="6" />
        <arg name="robot_type" value="xarm" />
        <arg name="add_gripper" value="false" />
        <arg name="add_vacuum_gripper" value="false" />
    </include>
		
    <!-- Launch the tracking node -->
    <node pkg="visp_auto_tracker" type="visp_auto_tracker" name="visp_auto_tracker">
        <param name="model_path" type="string" value="$(find visp_auto_tracker)/models" />
        <param name="model_name" type="string" value="pattern" />
        <param name="debug_display" type="bool" value="True" />
                
        <remap from="/visp_auto_tracker/camera_info" to="/camera_info"/>
        <remap from="/visp_auto_tracker/image_raw" to="/image_rect"/>	
        <remap from="/visp_auto_tracker/object_position_covariance" to="/object_position_covariance"  />
        <remap from="/visp_auto_tracker/object_position" to="/object_position"  />		
    </node>

    <!-- Launch the firewire camera acquisition node -->
    <node name="camera" pkg="camera_pkg" type="your_camera_node.py"  output="screen" launch-prefix="gnome-terminal --command"  />
  
    <!-- Launch the viewer -->
    <node pkg="visp_tracker" type="viewer" name="tracker_mbt_viewer" args="_camera_prefix:=/" output="screen" />
    <node name="Controller" pkg="xarm_interface" type="controller.py"  output="screen" launch-prefix="bash -c 'sleep 5.0; $0 $@' "  />
    <node name="xarm_qr_controller" pkg="vision" type="xarm_challenge.py"  output="screen" launch-prefix="gnome-terminal --command"  />
   

</launch>